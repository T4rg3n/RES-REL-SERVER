openapi: '3.0.2'
info:
  title: Ressources Relationnelles
  version: '1.0'
servers:
  - url: https://api.victor-gombert.fr/api/v1

#TODO : 42crunch API security test

paths:
  #region Authentification (review : ok)
  /connexion:
    post:
      summary: Login
      description: Login a user with an email password and get a bearer token to issue API requests. 
      tags:
        - Authentification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                  description: Email of the user
                  example: "john.doe@domain.com"
                motDePasse:
                  type: string
                  description: Password of the user
                  example: "password"
      responses:
        '200':
          description: Login
          content:
            application/json:
              schema:
                type: object
              example:
                - token: "1|EojGLORUas6xz0OmRvuaZ4ReNhjqVVM5pdcUevJg"
                  idUti: 1
  /inscription:
     post:
        summary: Create an utilisateur
        description: Create an utilisateur by sending a JSON object and an image file for its profile picture. The user is automatically given a beared token. Default role is user.
        tags:
         - Authentification
        requestBody:
         content:
           multiform/form-data:
            schema:
              type: object
              properties:
                mail:
                  type: string
                motDePasse:
                  type: string
                dateNaissance:
                  type: string
                codePostal:
                  type: string
                nom:
                  type: string
                prenom:
                  type: string
                photoProfil:
                  type: string
                  format: binary
                bio:
                  type: string
              example:
                 mail: "john.doe@gmail.com"
                 motDePasse: "password01"
                 dateNaissance: 2002-01-02 00:00:00
                 codePostal: 75000
                 nom: "Doe"
                 prenom: "John"
                 photoProfil: photoProfil=@"/C:/Users/user/Desktop/profile_picture_resrel.jpg
                 bio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc."        
        responses:
          '201':
            description: Create an utilisateur
            content:
             application/json:
               schema:
                 type: object
               example:
                 - response:
                    id: 1
                    mail: "john.doe@gmail.com"
                    dateInscription: 2023-01-02 21:16:55
                    dateNaissance: 2002-01-02 00:00:00
                    codePostal: "75000"
                    nom: "Doe"
                    prenom: "John"
                    bio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc."
                    compteActif: true
                    raisonBan: nulSl
                    idRole: 4
                 - token: "1|EojGLORUas6xz0OmRvuaZ4ReNhjqVVM5pdcUevJg"             
  /deconnexion:
    get:
      summary: Logout
      description: Logout a user by invalidating the bearer token sent in the auth header. 
      security:
        - bearerAuth: []
      tags:
        - Authentification
      responses:
        '200':
          description: Logout
          content:
            application/json:
              schema:
                type: object
              example:
                - message: "Logged out successfully"
  #endregion
  
  #region Administration
  # /promouvoir:
  #   post:
  #     summary: Promote a user [Work in progress, subject to change]
  #     description: Promote a user to a higher role (you need to be an admin to do this)
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Administration
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               idUtilisateur:
  #                 type: integer
  #                 description: ID of the user
  #                 example: 1
  #               idRole:
  #                 type: integer
  #                 description: ID of the role
  #                 example: 4
  #     responses:
  #       '200':
  #         description: Promote a user
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #             example:
  #               - idUtilisateur: 1
  #                 role: modérateur
  # /retrograder:
  #   post:
  #     summary: Demote a user [Work in progress, subject to change]
  #     description: Demote a user to a lower role (you need to be an admin to do this)
  #     security:
  #       - bearerAuth: []
  #     tags:
  #       - Administration
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               idUtilisateur:
  #                 type: integer
  #                 description: ID of the user
  #                 example: 1
  #               idRole:
  #                 type: integer
  #                 description: ID of the role
  #                 example: 1
  #     responses:
  #       '200':
  #         description: Demote a user
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #             example:
  #               - idUtilisateur: 1
  #                 role: utilisateur
  #endregion

  #region Categories (review : ok)
  /categories:
    get:
      summary: Get all categories
      tags: 
        - Categories
      parameters:
            - name: perPage
              in: query
              description: Set the number of categories per page
              required: false
              schema:
                type: integer
              #want : <key>[<operator>]=<value> 
              #ébut returns : &operator=<operator>&value=<value>
            - name: <key>[<operator>]=<value>
              in: query
              description: "Allow to filter categories with operators like : equals, notEquals, lowerThan, lowerThanEquals, greaterThan, greaterThanEquals"
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - id: 1
                  nom: "Communication"
                - id: 2
                  nom: "Culture"
                - id: 3
                  nom: "Développement personnel"
                - id: 4
                  nom: "Intelligence émotionnelle"
                - id: 5
                  nom: "Loisirs"
                - id: 6
                  nom: "Monde professionnel"
                - id: 7
                  nom: "Parentalité"
                - id: 8
                  nom: "Qualité de vie"
                - id: 9
                  nom: "Recherche de sens"
                - id: 10
                  nom : "Santé physique"
                - id: 11
                  nom : "Santé psychique"
                - id: 12
                  nom : "Spiritualité"
                - id: 13
                  nom : "Vie affective"
    post:
      summary: Create a category
      security:
        - bearerAuth: []
      tags:
        - Categories
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  description: Name of the category
                  example: "Ma super categorie"
      responses:
        '201':
          description: Create a category
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 14
                  nom : "Ma super categorie"
  /categories/{id}:
    get:
      summary: Get a category by id
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: ID of the category
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a category by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  nom: "Communication"
    delete:
      summary: Delete a category 
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the category
          required: true
          schema:
            type: integer
      tags:
        - Categories
      responses:
        '200':
          description: Delete a category
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Categorie deleted"
  #endregion

  #region Commentaires (review : ok)
  /commentaires:
    get:
      summary: Get all commentaires
      tags: 
        - Commentaires
      parameters:
            - name: perPage
              in: query
              description: Set the number of commentaires per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter commentaires with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all commentaires
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                  - id: 1
                    contenu: "Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam."
                    datePublication: "2023-01-02 21:16:55"
                    nombreReponses: 2
                    supprime : false
                    nombreSignalements: 0
                    idUtilisateur: 1
                    idRessource: 3
                  - id: 2
                    contenu: "Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam."
                    datePublication: "2023-01-02 21:16:55"
                    nombreReponses: 0
                    supprime : true
                    nombreSignalements: 4
                    idUtilisateur: 2
                    idRessource: 3
    post:
      summary: Create a commentaire
      security:
        - bearerAuth: []
      tags:
        - Commentaires
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contenu:
                  type: string
                  description: Contenu of the commentaire
                  example: "Contenu du nouveau commentaire"
                idUtilisateur:
                  type: integer
                  description: Id of the user
                  example: 1
                idRessource:
                  type: integer
                  description: Id of the ressource
                  example: 2
      responses:
        '201':
          description: Create a commentaire
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 10
                  contenu : "Contenu du nouveau commentaire"
                  datePublication: 2023-01-02 21:16:55
                  nombreReponses: 0
                  supprime : false
                  nombreSignalements: 0
                  idUtilisateur : 1
                  idRessource : 2
  /commentaires/{id}/disable:
    patch:
      summary: Disable a commentaire
      security:
        - bearerAuth: []
      tags:
        - Commentaires
      responses:
        '200':
          description: Disable a commentaire
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Commentaire disabled"
  /commentaires/{id}/report:
    patch:
      summary: Report a commentaire
      security:
        - bearerAuth: []
      tags:
        - Commentaires
      parameters:
        - name: id
          in: path
          description: ID of the commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Report a commentaire
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Commentaire reported"
  /commentaires/{id}:
    get:
      summary: Get a commentaire by id
      tags:
        - Commentaires
      parameters:
        - name: id
          in: path
          description: ID of the commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a commentaire by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  dateCreation: 2023-01-02 21:16:55
                  status: PENDING
                  idUtilisateur: 1
                  contenu: Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam.
                  datePublication: null
                  raisonRefus: null
                  idRessource: 2 
    delete:
      summary: Delete a commentaire 
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the commentaire
          required: true
          schema:
            type: integer
      tags:
        - Commentaires
      responses:
        '200':
          description: Delete a commentaire
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Commentaire deleted"
  #endregion

  #region Favoris (review: ok)
  /favoris:
    get:
      summary: Get all favoris
      tags: 
        - Favoris
      security:
        - bearerAuth: []
      parameters:
            - name: perPage
              in: query
              description: Set the number of favoris per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter favoris with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all favoris
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                - id: 1
                  dateFav: 2023-03-06 12:10:02
                  idUtilisateur: 1
                  idRessource: 2
                - id: 2
                  dateFav: 2023-03-06 12:10:02
                  idUtilisateur: 5
                  idRessource: 3
    post:
      summary: Create a favori
      security:
        - bearerAuth: []
      tags:
        - Favoris
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idUtilisateur:
                  type: integer
                  description: Id of the user
                  example: 1
                idRessource:
                  type: integer
                  description: Id of the ressource
                  example: 2
      responses:
        '201':
          description: Create a favori
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 10
                  idUtilisateur : 1
                  idRessource : 2
  /favoris/{id}:
    get:
      summary: Get a favori by id
      security:
        - bearerAuth: []
      tags:
        - Favoris
      parameters:
        - name: id
          in: path
          description: ID of the favori
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a favori by id
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1
                  dateCreation: 2023-01-02 21:16:55
                  status: PENDING
                  idUtilisateur: 1
                  idRessource: 2
    delete:
      summary: Delete a favori 
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the favori
          required: true
          schema:
            type: integer
      tags:
        - Favoris
      responses:
        '200':
          description: Delete a favori
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Favori deleted"
  #endregion

  #region Groupes (review ok)
  /groupes:
    get:
      summary: Get all groupes
      security:
        - bearerAuth: []
      tags: 
        - Groupes
      parameters:
            - name: perPage
              in: query
              description: Set the number of groupes per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter groupes with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all groupes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                  - id: 1
                    nom: "Groupe 1"
                    description: "Description du groupe 1"
                    estPrive: true
                  - id: 2
                    nom: "Groupe 2"
                    description: "Description du groupe 2"
                    estPrive: false
    #TODO ajouter des gens dans les groupes
    #TODO check si le nom du groupe est déjà pris
    post:
      summary: Create a groupe
      security:
        - bearerAuth: []
      tags:
        - Groupes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  description: Name of the groupe
                  example: "Groupe 3"
                description:
                  type: string
                  description: Description of the groupe
                  example: "Description du groupe 3"
                estPrive:
                  type: boolean
                  description: Is the groupe private
                  example: true
      responses:
        '201':
          description: Create a groupe
          content:
            application/json:
              schema:
                type: object
              example:
                - nom : "Groupe 3"
                  description : "Description du groupe 3"
                  estPrive : true
  /groupes/{id}: 
    get:
      summary: Get a groupe by id
      security:
        - bearerAuth: []
      tags:
        - Groupes
      parameters:
        - name: id
          in: path
          description: ID of the groupe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a groupe by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1
                    nom: "Groupe 1"
                    description: "Description du groupe 1"
                    estPrive: true
    delete:
      summary: Delete a groupe by id
      security:
        - bearerAuth: []
      tags:
        - Groupes
      parameters:
        - name: id
          in: path
          description: ID of the groupe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete a groupe by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Groupe deleted"
  #endregion
 
  #region Pieces jointes (review ok)
  #TODO Add type ressource texte (dans contenu)
  #TODO Add dossier "activites" (dans contenu)
  /piecesJointes:
    get:
      summary: Get all pieces jointes
      security:
        - bearerAuth: []
      tags: 
        - Pieces jointes
      parameters:
            - name: perPage
              in: query
              description: Set the number of pieces jointes per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter pieces jointes with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all pieces jointes
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                  - id: 1
                    type: "PDF"
                    titre: "Annexe PDF sur la situation géopolitique au Zimbabwe"
                    dateCreation: 2023-01-02 21:16:55
                    description: "Rapport de l'ONU de 2015 au Zimbabwe"
                    contenu: "/user-files/1/pdf/1_ressource.pdf"
                    dateActivite: null
                    lieu: null
                    codePostal: null
                    idUtilisateur: 1
                  - id: 2
                    type: "ACTIVITE"
                    titre: "Clean walk à Dijon"
                    dateCreation: 2023-03-06 12:10:02
                    description: "Ramassage des déchets dans le centre ville de Dijon"
                    contenu: "/user-files/1/activites/1_ressource.pdf"
                    dateActivite: null
                    lieu: null
                    codePostal: null
                    idUtilisateur: 5
    post:
      summary: Create a piece jointe
      security:
        - bearerAuth: []
      tags:
        - Pieces jointes
      requestBody:
        content:
          application/form-data:
            schema:
              type: object
              properties:
                idUtilisateur:
                  type: integer
                  description: ID of the user
                  example: 1
                type:
                  type: string
                  description: Type of the piece jointe
                  example: "PDF"
                titre:
                  type: string
                  description: Title of the piece jointe
                  example: "Annexe PDF sur la situation géopolitique au Zimbabwe"
                description:
                  type: string
                  description: Description of the piece jointe
                  example: "Lorem ipsum ceci est une description"
                file:
                  type: string
                  format: binary
                  description: File of the piece jointe
                  example: "C:\\Users\\user\\Documents\\file.pdf"
      responses:
        '201':
          description: Create a piece jointe
          content:
            application/json:
              schema:
                type: object
              example:
                - idUtilisateur : 1
                  idRessource : 2
                  type : PDF
                  titre : "Annexe PDF sur la situation géopolitique au Zimbabwe"
                  description: "Lorem ipsum ceci est une description"
  /pieceJointes/{id}:
    get:
      summary: Get a piece jointe by id
      security:
        - bearerAuth: []
      tags:
        - Pieces jointes
      parameters:
        - name: id
          in: path
          description: ID of the piece jointe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a piece jointe by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1
                    type: "PDF"
                    titre: "Annexe PDF sur la situation géopolitique au Zimbabwe"
                    dateCreation: 2023-01-02 21:16:55
                    description: "Rapport de l'ONU de 2015 au Zimbabwe"
                    contenu: "/user-files/1/pdf/1_ressource.pdf"
                    dateActivite: null
                    lieu: null
                    codePostal: null
                    idUtilisateur: 1
    delete:
      summary: Delete a piece jointe by id
      security:
        - bearerAuth: []
      tags:
        - Pieces jointes
      parameters:
        - name: id
          in: path
          description: ID of the piece jointe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete a piece jointe by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Piece jointe deleted"
  /piecesJointes/{id}/download:
    get:
      summary: Download a piece jointe by id
      tags:
        - Pieces jointes
      parameters:
        - name: id
          in: path
          description: ID of the piece jointe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Download a piece jointe by id
  #endregion

  #region Relations (review ok)
  /relations:
    get:
      summary: Get all relations
      security:
        - bearerAuth: []
      tags: 
        - Relations
      parameters:
            - name: perPage
              in: query
              description: Set the number of relations per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter relations with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all relations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                  - id: 1
                    typeRelation: 1
                    idDemandeur: 1
                    idReceveur: 2
                    dateDemande: 2023-01-02 21:16:55
                    dateAcceptation: 2023-02-02 13:18:02
                    accepte: true
                  - id: 2
                    typeRelation: 3
                    idDemandeur: 178
                    idReceveur: 918
                    dateDemande: 2023-01-02 21:16:55
                    dateAcceptation: null
                    accepte: null
    #TODO typeRelation dans StoreRelationRequest
    post:
      summary: Create a relation
      security:
        - bearerAuth: []
      tags:
        - Relations
      responses:
        '201':
          description: Create a relation
          content:
            application/json:
              schema:
                type: object
              example:
                - idDemandeur : 1
                  idReceveur : 2
                  typeRelation : 1
  /relation/{id}:
    get:
      summary: Get a relation by id
      security:
        - bearerAuth: []
      tags:
        - Relations
      parameters:
        - name: id
          in: path
          description: ID of the relation
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a relation by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  - id: 1
                    typeRelation: 1
                    idDemandeur: 1
                    idReceveur: 2
                    dateDemande: 2023-01-02 21:16:55
                    dateAcceptation: 2023-01-02 22:02:03
                    accepte: true
    delete:
      summary: Delete a relation by id
      security:
        - bearerAuth: []
      tags:
        - Relations
      parameters:
        - name: id
          in: path
          description: ID of the relation
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete a relation by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Relation deleted"
  #endregion

  #region Reponses commentaires (review ok)
  /reponsesCommentaires:
    get:
      summary: Get all reponses commentaires
      tags: 
        - Reponses commentaires
      parameters:
            - name: perPage
              in: query
              description: Set the number of reponses commentaires per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter reponses commentaires with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all reponses commentaires
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - id: 1
                  contenu: "C'est une bonne idée"
                  nombreSignalements: 0
                  idUtilisateur: 2
                  idCommentaire: 1
                  datePublication: 2023-01-02 21:16:55
                  reponseSupprime: false
                - id: 2
                  contenu: "Ouep je suis d'accord"
                  nombreSignalements: 0
                  idUtilisateur: 2
                  idCommentaire: 1
                  datePublication: 2023-01-02 21:16:55
                  reponseSupprime: false
    post:
      summary: Create a reponse commentaire
      security:
        - bearerAuth: []
      tags:
        - Reponses commentaires
      responses:
        '201':
          description: Create a reponse commentaire
          content:
            application/json:
              schema:
                type: object
              example:
                - idCommentaire : 1
                  idUtilisateur : 2
                  contenu : "C'est une bonne idée"
  /reponsesCommentaires/{id}/disable:
    patch:
      summary: Disable a reponse commentaire by id
      security:
        - bearerAuth: []
      tags:
        - Reponses commentaires
      parameters:
        - name: id
          in: path
          description: ID of the reponse commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Disable a reponse commentaire by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: 'Reponse disabled'
  /reponsesCommentaires/{id}/report:
    patch:
      summary: Report a reponse commentaire by id
      security:
        - bearerAuth: []
      tags:
        - Reponses commentaires
      parameters:
        - name: id
          in: path
          description: ID of the reponse commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Report a reponse commentaire by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: 'Reponse reported'
  /reponsesCommentaires/{id}:
    get:
      summary: Get a reponse commentaire by id
      tags:
        - Reponses commentaires
      parameters:
        - name: id
          in: path
          description: ID of the reponse commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a reponse commentaire by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 2
                  contenu: "Bonjour je suis une réponse commentaire"
                  nombreSignalements: 0
                  idUtilisateur: 2
                  idCommentaire: 1
                  datePublication: 2023-04-14 09:52:12
                  reponseSupprime: false        
    delete:
      summary: Delete a reponse commentaire by id
      security:
        - bearerAuth: []
      tags:
        - Reponses commentaires
      parameters:
        - name: id
          in: path
          description: ID of the reponse commentaire
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete a reponse commentaire by id
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Reponse deleted"
  #endregion

  #region Ressources (review ok)
  /ressources:
    get:
      summary: Get all ressources
      description: Get all ressources as a JSON array
      tags: 
        - Ressources
      parameters:
            - name: perPage
              in: query
              description: Set the number of ressources per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter ressources with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all Ressources
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - id: 1
                  dateCreation: 2023-01-02 21:16:55
                  status: PENDING
                  idUtilisateur: 1
                  partage: PRIVATE
                  titre: Quis dolores repellendus fuga ut sit perferendis.
                  contenu: Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam.
                  datePublication: null
                  raisonRefus: null
                  idCategorie: 2
                - id: 2
                  dateCreation: 2023-03-06 12:10:02
                  status: APPROVED
                  idUtilisateur: 5
                  partage: PUBLIC
                  titre: Quis dolores repellendus fuga ut sit perferendis.
                  contenu: Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam.
                  datePublication: null
                  raisonRefus: null
                  idCategorie: 3
    post:
      summary: Create a ressource
      security:
        - bearerAuth: []
      description: Create a ressource by sending a JSON object
      tags:
        - Ressources
      requestBody:
        content:
          application/form-data:
            schema:   
              type: object
              properties:
                titre:
                  example: "Ajout d'une nouvelle ressource"
                  type: string
                contenu:
                  example: "Contenu de la nouvelle ressource"
                  type: string
                idUtilisateur:
                  example: 1
                  type: integer
                idCategorie:
                  example: 2
                  type: integer
                idPieceJointe:
                  example: 3
                  type: integer
      responses:
        '201':
          description: Create a ressource
          content:
            application/json:
              schema:
                type: object
              example:
                - titre : "Ajout d'une nouvelle ressource"
                  contenu : "Contenu de la nouvelle ressource"
                  idUtilisateur : 1
                  idCategorie : 2
                  idPieceJointe : 3           
  /ressources/disable: 
    patch:
      summary: Refuse a ressource
      operationId: refuseRessource
      security:
        - bearerAuth: []
      description: Moderate and give a refusal reason for a ressource
      tags:
        - Ressources
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                raison:
                  type: string
            example:
              id: 1
              raison: "Raison du refus"
      responses:
        '200':
          description: Refuse a ressource
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Ressource refused"
  /ressources/{id}/enable:
    patch:
      summary: Accept a ressource
      operationId: acceptRessource
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the ressource
          required: true
          schema:
            type: integer
      description: Moderate and accept a ressource
      tags:
        - Ressources
      responses:
        '200':
          description: Accept a ressource
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Ressource accepted"
  /ressources/{id}:
    get:
      summary: Get a ressource by id
      description: Get a single ressource by its id
      tags:
        - Ressources
      parameters:
        - name: id
          in: path
          description: ID of the ressource
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a ressource by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  dateCreation: 2023-01-02 21:16:55
                  status: PENDING
                  idUtilisateur: 1
                  partage: RESTRICTED
                  titre: Quis dolores repellendus fuga ut sit perferendis.
                  contenu: Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam.
                  datePublication: null
                  raisonRefus: null
                  idCategorie: 2
                  idPieceJointe: 3
    delete:
      summary: Delete a ressource
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the ressource
          required: true
          schema:
            type: integer
      description: Delete a single ressource by its id
      tags:
        - Ressources
      responses:
        '200':
          description: Delete a ressource
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Ressource deleted"
  #endregion

  #region Roles
  /roles:
    get:
      summary: Get all roles
      description: Get all roles as a JSON array
      tags: 
        - Roles
      parameters:
            - name: perPage
              in: query
              description: Set the number of roles per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter roles with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all Roles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - id: 1
                  nom: administrateur
                - id: 2
                  nom: utilisateur
    #TODO fix post & passer les ascendant et descandant en int 
    post:
      summary: Create a role
      security:
        - bearerAuth: []
      description: Create a role by sending a JSON object
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                ascendant:
                  type: string
                descandant:
                  type: string
            example:
              nom: "Super modérateur"
              ascendant : "administrateur"
              descandant : "utilisateur"
      responses:
        '201':
          description: Create a role
          content:
            application/json:
              schema:
                type: object
              example:
                - nom : "modérateur"
                 
  /roles/{id}:
    get:
      summary: Get a role by id
      description: Get a single role by its id
      tags:
        - Roles
      parameters:
        - name: id
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a role by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  nom: administrateur
    delete:
      summary: Delete a role
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the role
          required: true
          schema:
            type: integer
      description: Delete a single role by its id
      tags:
        - Roles
      responses:
        '200':
          description: Delete a role
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Role deleted"
  #endregion

  #region Recherche (review ok)
  /rechercher:
    post:
      summary: Search a user or a ressource 
      description: Search a user by its name or surname, or a ressource by its title or content
      tags:
        - Recherche
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: object
                  properties:
                    ressource:
                      type: object
                      properties:
                        q:
                          type: string
                          example: "Quis dolores"
                        include:
                          type: array
                          items:
                            type: string
                          example: ["utilisateur"]
                    utilisateur:
                      type: object
                      properties:
                        q:
                          type: string
                          example: "John"
      responses:
        '200':
          description: Search a ressource
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                ressources:
                  id: 1
                  dateCreation: 2023-01-02 21:16:55
                  status: PENDING
                  idUtilisateur: 1
                  partage: RESTRICTED
                  titre: Quis dolores repellendus fuga ut sit perferendis.
                  contenu: Voluptas cum sint accusamus quo officiis qui. Eum voluptatem autem aut nisi. Quae molestiae optio et ut. Voluptatem vel hic temporibus ea animi magni totam.
                  datePublication: null
                  raisonRefus: null
                  idCategorie: 2
                utilisateurs:
                  id: 1,
                  mail: john.doe@gmail.com
                  dateInscription: 2023-01-02 15:07:55
                  dateNaissance: 2002-01-02
                  codePostal: 75000
                  nom: Doe
                  prenom: John
                  bio: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc.
                  compteActif: true
                  raisonBan: null
                  idRole: 1
  #endregion

  #region Types Relation (review ok but need fixes)
  /typesRelation:
    get:
      summary: Get all types relation
      description: Get all types relation as a JSON array
      tags: 
        - Types Relation
      parameters:
            - name: perPage
              in: query
              description: Set the number of types relation per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter types relation with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all Types Relation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                - id: 1
                  nom: Ami
                - id: 2
                  nom: Collègue
    post:
      summary: Create a type relation
      security:
        - bearerAuth: []
      description: Create a type relation by sending a JSON object
      tags:
        - Types Relation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
            example:
              nom: "Ami"
      responses:
        '201':
          description: Create a type relation
          content:
            application/json:
              schema:
                type: object
              example:
                - id: 1
                  nom : "Ami"
  /typesRelation/{id}:
    get:
      summary: Get a type relation by id
      description: Get a single type relation by its id
      tags:
        - Types Relation
      parameters:
        - name: id
          in: path
          description: ID of the type relation
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get a type relation by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  nom: Soi
    delete:
      summary: Delete a type relation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the type relation
          required: true
          schema:
            type: integer
      description: Delete a single type relation by its id
      tags:
        - Types Relation
      responses:
        '200':
          description: Delete a type relation
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Type relation deleted"
  #endregion

  #region Utilisateurs (review ok but)
  /utilisateurs:
    get:
      summary: Get all utilisateurs
      description: Get all utilisateurs as a JSON array
      tags: 
        - Utilisateurs
      parameters:
            - name: perPage
              in: query
              description: Set the number of utilisateurs per page
              required: false
              schema:
                type: integer
            - name: <key>[<operator>]=<value>
              in: query
              description: Allow to filter utilisateurs with operators like equals, greater than, less than, greater than equals, less than equals
              required: false
              schema:
                type: string
      responses:
        '200':
          description: Get all Utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              example:
                data:
                  id: 1
                  mail: "john.doe@gmail.com"
                  dateInscription: 2023-01-02 21:16:55
                  dateNaissance: 2002-01-02 00:00:00
                  codePostal: 75000
                  nom: "Doe"
                  prenom: "John"
                  bio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc."
                  compteActif: true
                  raisonBan: null
                  idRole: 1
  /utilisateur/disable:  
    post:
      summary: Disable an utilisateur
      security:
        - bearerAuth: []
      description: Disable (ban) an utilisateur by sending a JSON object
      tags:
        - Utilisateurs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                raison:
                  type: string
            example:
              id: 1
              compteActif: false
      responses:
        '201':
          description: Disable an utilisateur
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Utilisateur disabled"
  /utilisateurs/{id}/download:
    get:
      summary: Download a user's profile picture
      description: Download a user's profile picture by its id
      tags:
        - Utilisateurs
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Download a user's profile picture
          content:
            multiform/form-data:
              schema:
                type: object
                format: binary
              example:
                - file: "1_photoProfil.jpg"            
  /utilisateurs/{id}:
    get:
      summary: Get an utilisateur by id
      description: Get a single utilisateur by its id
      tags:
        - Utilisateurs
      parameters:
        - name: id
          in: path
          description: ID of the utilisateur
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get an utilisateur by id
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  id: 1
                  mail: "john.doe@gmail.com"
                  dateInscription: 2023-01-02 21:16:55
                  dateNaissance: 2002-01-02 00:00:00
                  codePostal: 75000
                  nom: "Doe"
                  prenom: "John"
                  bio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc. Sed euismod, nisl vitae ultricies lacinia, nunc nisl aliquet nisl, eget aliquet nunc nisl eget nunc."
                  compteActif: true
                  raisonBan: null
                  idRole: 1
    delete:
      summary: Delete an utilisateur
      security:
        - bearerAuth: []
      description: Delete a single utilisateur by its id. 
      tags:
        - Utilisateurs
      parameters:
        - name: id
          in: path
          description: ID of the utilisateur
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Delete an utilisateur
          content:
            application/json:
              schema:
                type: object
              example:
                message : "Utilisateur deleted"

  #endregion

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT